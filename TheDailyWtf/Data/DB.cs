//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using global::System;
using global::System.ComponentModel;
using global::System.Data;
using global::System.Data.SqlClient;
using global::System.Collections.Generic;
using global::System.Linq;
using global::System.Threading.Tasks;
using global::System.Xml.Linq;
using global::Inedo.Data;

#pragma warning disable 1591
namespace TheDailyWtf.Data
{
    /// <summary>
    /// Provides strongly typed wrapper methods for stored procedures.
    /// </summary>
    public static partial class DB
    {
        /// <summary>
        /// 
        /// </summary>
        public static IList<Tables.AdImpressions> AdImpressions_GetImpressions(DateTime? Start_Date = null, DateTime? End_Date = null)
        {
            return new Context(false).AdImpressions_GetImpressions(Start_Date, End_Date).ToList();
        }
        /// <summary>
        /// 
        /// </summary>
        public static void AdImpressions_IncrementCount(string Banner_Name, DateTime? Impression_Date, int? Impression_Count)
        {
            new Context(false).AdImpressions_IncrementCount(Banner_Name, Impression_Date, Impression_Count);
        }
        /// <summary>
        /// 
        /// </summary>
        public static void AdRedirectUrls_AddRedirectUrl(string Redirect_Url)
        {
            new Context(false).AdRedirectUrls_AddRedirectUrl(Redirect_Url);
        }
        /// <summary>
        /// 
        /// </summary>
        public static IList<Tables.AdRedirectUrls> AdRedirectUrls_GetRedirectUrls()
        {
            return new Context(false).AdRedirectUrls_GetRedirectUrls().ToList();
        }
        /// <summary>
        /// 
        /// </summary>
        public static void AdRedirectUrls_IncrementClickCount(Guid? Ad_Guid, int? Increment_Count)
        {
            new Context(false).AdRedirectUrls_IncrementClickCount(Ad_Guid, Increment_Count);
        }
        /// <summary>
        /// 
        /// </summary>
        public static int? Ads_CreateOrUpdateAd(string Ad_Html, int? Ad_Id = null)
        {
            return new Context(false).Ads_CreateOrUpdateAd(Ad_Html, Ad_Id);
        }
        /// <summary>
        /// 
        /// </summary>
        public static IList<Tables.Ads> Ads_DeleteAd(int? Ad_Id)
        {
            return new Context(false).Ads_DeleteAd(Ad_Id).ToList();
        }
        /// <summary>
        /// 
        /// </summary>
        public static IList<Tables.Ads> Ads_GetAds()
        {
            return new Context(false).Ads_GetAds().ToList();
        }
        /// <summary>
        /// 
        /// </summary>
        public static YNIndicator? Articles_ApproveComment(int? Article_Id, int? Comment_Id, YNIndicator? Valid_Indicator = null)
        {
            return new Context(false).Articles_ApproveComment(Article_Id, Comment_Id, Valid_Indicator);
        }
        /// <summary>
        /// 
        /// </summary>
        public static int? Articles_CreateOrUpdateArticle(int? Article_Id, string Article_Slug = null, DateTime? Published_Date = null, string PublishedStatus_Name = null, string Author_Slug = null, string Title_Text = null, string Series_Slug = null, string Body_Html = null, int? Discourse_Topic_Id = null, string Discourse_Topic_Opened = null)
        {
            return new Context(false).Articles_CreateOrUpdateArticle(Article_Id, Article_Slug, Published_Date, PublishedStatus_Name, Author_Slug, Title_Text, Series_Slug, Body_Html, Discourse_Topic_Id, Discourse_Topic_Opened);
        }
        /// <summary>
        /// 
        /// </summary>
        public static void Articles_DeleteArticle(int? Article_Id)
        {
            new Context(false).Articles_DeleteArticle(Article_Id);
        }
        /// <summary>
        /// 
        /// </summary>
        public static YNIndicator? Articles_FeatureComment(int? Article_Id, int? Comment_Id, YNIndicator? Valid_Indicator = null)
        {
            return new Context(false).Articles_FeatureComment(Article_Id, Comment_Id, Valid_Indicator);
        }
        /// <summary>
        /// 
        /// </summary>
        public static void Articles_FixMissingAds()
        {
            new Context(false).Articles_FixMissingAds();
        }
        /// <summary>
        /// 
        /// </summary>
        public static Tables.Articles_Extended Articles_GetArticleById(int? Article_Id)
        {
            return new Context(false).Articles_GetArticleById(Article_Id);
        }
        /// <summary>
        /// 
        /// </summary>
        public static Tables.Articles_Extended Articles_GetArticleByLegacyPost(int? Post_Id)
        {
            return new Context(false).Articles_GetArticleByLegacyPost(Post_Id);
        }
        /// <summary>
        /// 
        /// </summary>
        public static Tables.Articles_Extended Articles_GetArticleBySlug(string Article_Slug)
        {
            return new Context(false).Articles_GetArticleBySlug(Article_Slug);
        }
        /// <summary>
        /// 
        /// </summary>
        public static IList<Tables.Articles_Extended> Articles_GetArticles(string Series_Slug, string PublishedStatus_Name, DateTime? RangeStart_Date, DateTime? RangeEnd_Date, string Author_Slug = null)
        {
            return new Context(false).Articles_GetArticles(Series_Slug, PublishedStatus_Name, RangeStart_Date, RangeEnd_Date, Author_Slug).ToList();
        }
        /// <summary>
        /// 
        /// </summary>
        public static IList<Tables.Articles_Slim> Articles_GetArticlesSlim()
        {
            return new Context(false).Articles_GetArticlesSlim().ToList();
        }
        /// <summary>
        /// 
        /// </summary>
        public static IList<Tables.Comments_Extended> Articles_GetFeaturedComments(int? Article_Id)
        {
            return new Context(false).Articles_GetFeaturedComments(Article_Id).ToList();
        }
        /// <summary>
        /// 
        /// </summary>
        public static IList<Tables.Articles_Extended> Articles_GetOtherRecentArticles(string PublishedStatus_Name, int? Article_Count = null)
        {
            return new Context(false).Articles_GetOtherRecentArticles(PublishedStatus_Name, Article_Count).ToList();
        }
        /// <summary>
        /// 
        /// </summary>
        public static IList<Tables.Articles_Extended> Articles_GetRecentArticles(string PublishedStatus_Name, string Series_Slug = null, string Author_Slug = null, int? Article_Count = null)
        {
            return new Context(false).Articles_GetRecentArticles(PublishedStatus_Name, Series_Slug, Author_Slug, Article_Count).ToList();
        }
        /// <summary>
        /// 
        /// </summary>
        public static IList<Tables.Articles_Extended> Articles_GetUnpublishedArticles(string Author_Slug = null)
        {
            return new Context(false).Articles_GetUnpublishedArticles(Author_Slug).ToList();
        }
        /// <summary>
        /// 
        /// </summary>
        public static YNIndicator? Articles_UnfeatureComment(int? Article_Id, int? Comment_Id, YNIndicator? Valid_Indicator = null)
        {
            return new Context(false).Articles_UnfeatureComment(Article_Id, Comment_Id, Valid_Indicator);
        }
        /// <summary>
        /// 
        /// </summary>
        public static void Authors_CreateOrUpdateAuthor(string Author_Slug, string Display_Name, YNIndicator? Admin_Indicator, string Bio_Html, string ShortBio_Text, string Image_Url, YNIndicator? Active_Indicator)
        {
            new Context(false).Authors_CreateOrUpdateAuthor(Author_Slug, Display_Name, Admin_Indicator, Bio_Html, ShortBio_Text, Image_Url, Active_Indicator);
        }
        /// <summary>
        /// 
        /// </summary>
        public static Tables.Authors Authors_GetAuthorBySlug(string Author_Slug)
        {
            return new Context(false).Authors_GetAuthorBySlug(Author_Slug);
        }
        /// <summary>
        /// 
        /// </summary>
        public static IList<Tables.Authors> Authors_GetAuthors()
        {
            return new Context(false).Authors_GetAuthors().ToList();
        }
        /// <summary>
        /// 
        /// </summary>
        public static void Authors_SetPassword(string Author_Slug, string Password_Text)
        {
            new Context(false).Authors_SetPassword(Author_Slug, Password_Text);
        }
        /// <summary>
        /// 
        /// </summary>
        public static YNIndicator? Authors_ValidateLogin(string Author_Slug, string Password_Text, YNIndicator? Valid_Indicator = null)
        {
            return new Context(false).Authors_ValidateLogin(Author_Slug, Password_Text, Valid_Indicator);
        }
        /// <summary>
        /// 
        /// </summary>
        public static int? Comments_CountCommentsByIP(string User_IP, int? Comments_Count = null)
        {
            return new Context(false).Comments_CountCommentsByIP(User_IP, Comments_Count);
        }
        /// <summary>
        /// 
        /// </summary>
        public static int? Comments_CountCommentsByToken(string User_Token, int? Comments_Count = null)
        {
            return new Context(false).Comments_CountCommentsByToken(User_Token, Comments_Count);
        }
        /// <summary>
        /// 
        /// </summary>
        public static int? Comments_CountHiddenComments(string Author_Slug = null, int? Comments_Count = null)
        {
            return new Context(false).Comments_CountHiddenComments(Author_Slug, Comments_Count);
        }
        /// <summary>
        /// 
        /// </summary>
        public static int? Comments_CreateOrUpdateComment(int? Article_Id, string Body_Html, string User_Name, DateTime? Posted_Date, string User_IP, string User_Token, int? Parent_Comment_Id = null, YNIndicator? Hidden_Indicator = null, int? Comment_Id = null)
        {
            return new Context(false).Comments_CreateOrUpdateComment(Article_Id, Body_Html, User_Name, Posted_Date, User_IP, User_Token, Parent_Comment_Id, Hidden_Indicator, Comment_Id);
        }
        /// <summary>
        /// 
        /// </summary>
        public static void Comments_DeleteComments(string CommentIds_Csv)
        {
            new Context(false).Comments_DeleteComments(CommentIds_Csv);
        }
        /// <summary>
        /// 
        /// </summary>
        public static IList<Tables.Comments_Extended> Comments_GetCommentById(int? Comment_Id)
        {
            return new Context(false).Comments_GetCommentById(Comment_Id).ToList();
        }
        /// <summary>
        /// 
        /// </summary>
        public static IList<Tables.Comments_Extended> Comments_GetComments(int? Article_Id, int? Skip_Count = null, int? Limit_Count = null)
        {
            return new Context(false).Comments_GetComments(Article_Id, Skip_Count, Limit_Count).ToList();
        }
        /// <summary>
        /// 
        /// </summary>
        public static IList<Tables.Comments_Extended> Comments_GetCommentsByIP(string User_IP, int? Skip_Count = null, int? Limit_Count = null)
        {
            return new Context(false).Comments_GetCommentsByIP(User_IP, Skip_Count, Limit_Count).ToList();
        }
        /// <summary>
        /// 
        /// </summary>
        public static IList<Tables.Comments_Extended> Comments_GetCommentsByToken(string User_Token, int? Skip_Count = null, int? Limit_Count = null)
        {
            return new Context(false).Comments_GetCommentsByToken(User_Token, Skip_Count, Limit_Count).ToList();
        }
        /// <summary>
        /// 
        /// </summary>
        public static IList<Tables.Comments_Extended> Comments_GetHiddenComments(string Author_Slug = null, int? Skip_Count = null, int? Limit_Count = null)
        {
            return new Context(false).Comments_GetHiddenComments(Author_Slug, Skip_Count, Limit_Count).ToList();
        }
        /// <summary>
        /// 
        /// </summary>
        public static YNIndicator? Comments_UserHasApprovedComment(string User_IP, string User_Token, YNIndicator? Exists_Indicator = null)
        {
            return new Context(false).Comments_UserHasApprovedComment(User_IP, User_Token, Exists_Indicator);
        }
        /// <summary>
        /// 
        /// </summary>
        public static void Series_CreateOrUpdateSeries(string Series_Slug, string Title_Text, string Description_Text = null)
        {
            new Context(false).Series_CreateOrUpdateSeries(Series_Slug, Title_Text, Description_Text);
        }
        /// <summary>
        /// 
        /// </summary>
        public static IList<Tables.Series> Series_GetSeries()
        {
            return new Context(false).Series_GetSeries().ToList();
        }
        /// <summary>
        /// 
        /// </summary>
        public static Tables.Series Series_GetSeriesBySlug(string Series_Slug)
        {
            return new Context(false).Series_GetSeriesBySlug(Series_Slug);
        }
        /// <summary>
        /// Provides a strongly typed context wrapper to allow for transactions and row enumeration.
        /// </summary>
        public sealed partial class Context : SqlServerDatabaseContext
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="Context"/> class.
            /// </summary>
            public Context() { }
            /// <summary>
            /// Initializes a new instance of the <see cref="Context"/> class.
            /// </summary>
            /// <param name="keepConnection">Value indicating whether to maintain an open connection between commands.</param>
            public Context(bool keepConnection) : base(keepConnection) { }

            /// <summary>
            /// 
            /// </summary>
            public IEnumerable<Tables.AdImpressions> AdImpressions_GetImpressions(DateTime? Start_Date = null, DateTime? End_Date = null)
            {
                var list = new GenericDbParameter[2]
                {
                    new GenericDbParameter("@Start_Date", DbType.Date, 0, ParameterDirection.Input, Start_Date),
                    new GenericDbParameter("@End_Date", DbType.Date, 0, ParameterDirection.Input, End_Date)
                };
                return this.EnumerateTable<Tables.AdImpressions>("AdImpressions_GetImpressions", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public Task<IList<Tables.AdImpressions>> AdImpressions_GetImpressionsAsync(DateTime? Start_Date = null, DateTime? End_Date = null)
            {
                var list = new GenericDbParameter[2]
                {
                    new GenericDbParameter("@Start_Date", DbType.Date, 0, ParameterDirection.Input, Start_Date),
                    new GenericDbParameter("@End_Date", DbType.Date, 0, ParameterDirection.Input, End_Date)
                };
                return this.ExecuteTableAsync<Tables.AdImpressions>("AdImpressions_GetImpressions", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public void AdImpressions_IncrementCount(string Banner_Name, DateTime? Impression_Date, int? Impression_Count)
            {
                var list = new GenericDbParameter[3]
                {
                    new GenericDbParameter("@Banner_Name", DbType.AnsiString, 100, ParameterDirection.Input, Banner_Name),
                    new GenericDbParameter("@Impression_Date", DbType.Date, 0, ParameterDirection.Input, Impression_Date),
                    new GenericDbParameter("@Impression_Count", DbType.Int32, 0, ParameterDirection.Input, Impression_Count)
                };
                this.ExecuteNonQuery("AdImpressions_IncrementCount", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public Task AdImpressions_IncrementCountAsync(string Banner_Name, DateTime? Impression_Date, int? Impression_Count)
            {
                var list = new GenericDbParameter[3]
                {
                    new GenericDbParameter("@Banner_Name", DbType.AnsiString, 100, ParameterDirection.Input, Banner_Name),
                    new GenericDbParameter("@Impression_Date", DbType.Date, 0, ParameterDirection.Input, Impression_Date),
                    new GenericDbParameter("@Impression_Count", DbType.Int32, 0, ParameterDirection.Input, Impression_Count)
                };
                return this.ExecuteNonQueryAsync("AdImpressions_IncrementCount", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public void AdRedirectUrls_AddRedirectUrl(string Redirect_Url)
            {
                var list = new GenericDbParameter[1]
                {
                    new GenericDbParameter("@Redirect_Url", DbType.String, 255, ParameterDirection.Input, Redirect_Url)
                };
                this.ExecuteNonQuery("AdRedirectUrls_AddRedirectUrl", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public Task AdRedirectUrls_AddRedirectUrlAsync(string Redirect_Url)
            {
                var list = new GenericDbParameter[1]
                {
                    new GenericDbParameter("@Redirect_Url", DbType.String, 255, ParameterDirection.Input, Redirect_Url)
                };
                return this.ExecuteNonQueryAsync("AdRedirectUrls_AddRedirectUrl", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public IEnumerable<Tables.AdRedirectUrls> AdRedirectUrls_GetRedirectUrls()
            {
                var list = new GenericDbParameter[0]
                {
                };
                return this.EnumerateTable<Tables.AdRedirectUrls>("AdRedirectUrls_GetRedirectUrls", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public Task<IList<Tables.AdRedirectUrls>> AdRedirectUrls_GetRedirectUrlsAsync()
            {
                var list = new GenericDbParameter[0]
                {
                };
                return this.ExecuteTableAsync<Tables.AdRedirectUrls>("AdRedirectUrls_GetRedirectUrls", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public void AdRedirectUrls_IncrementClickCount(Guid? Ad_Guid, int? Increment_Count)
            {
                var list = new GenericDbParameter[2]
                {
                    new GenericDbParameter("@Ad_Guid", DbType.Guid, 0, ParameterDirection.Input, Ad_Guid),
                    new GenericDbParameter("@Increment_Count", DbType.Int32, 0, ParameterDirection.Input, Increment_Count)
                };
                this.ExecuteNonQuery("AdRedirectUrls_IncrementClickCount", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public Task AdRedirectUrls_IncrementClickCountAsync(Guid? Ad_Guid, int? Increment_Count)
            {
                var list = new GenericDbParameter[2]
                {
                    new GenericDbParameter("@Ad_Guid", DbType.Guid, 0, ParameterDirection.Input, Ad_Guid),
                    new GenericDbParameter("@Increment_Count", DbType.Int32, 0, ParameterDirection.Input, Increment_Count)
                };
                return this.ExecuteNonQueryAsync("AdRedirectUrls_IncrementClickCount", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public int? Ads_CreateOrUpdateAd(string Ad_Html, int? Ad_Id = null)
            {
                var list = new GenericDbParameter[2]
                {
                    new GenericDbParameter("@Ad_Html", DbType.String, -1, ParameterDirection.Input, Ad_Html),
                    new GenericDbParameter("@Ad_Id", DbType.Int32, 0, ParameterDirection.InputOutput, Ad_Id)
                };
                this.ExecuteNonQuery("Ads_CreateOrUpdateAd", list);
                if (Convert.IsDBNull(list[1].Value))
                    return default(int?);
                else
                    return (int?)list[1].Value;
            }
            /// <summary>
            /// 
            /// </summary>
            public Task<int?> Ads_CreateOrUpdateAdAsync(string Ad_Html, int? Ad_Id = null)
            {
                var list = new GenericDbParameter[2]
                {
                    new GenericDbParameter("@Ad_Html", DbType.String, -1, ParameterDirection.Input, Ad_Html),
                    new GenericDbParameter("@Ad_Id", DbType.Int32, 0, ParameterDirection.InputOutput, Ad_Id)
                };
                return this.ExecuteScalarAsync<int?>("Ads_CreateOrUpdateAd", list, 1);
            }
            /// <summary>
            /// 
            /// </summary>
            public IEnumerable<Tables.Ads> Ads_DeleteAd(int? Ad_Id)
            {
                var list = new GenericDbParameter[1]
                {
                    new GenericDbParameter("@Ad_Id", DbType.Int32, 0, ParameterDirection.Input, Ad_Id)
                };
                return this.EnumerateTable<Tables.Ads>("Ads_DeleteAd", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public Task<IList<Tables.Ads>> Ads_DeleteAdAsync(int? Ad_Id)
            {
                var list = new GenericDbParameter[1]
                {
                    new GenericDbParameter("@Ad_Id", DbType.Int32, 0, ParameterDirection.Input, Ad_Id)
                };
                return this.ExecuteTableAsync<Tables.Ads>("Ads_DeleteAd", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public IEnumerable<Tables.Ads> Ads_GetAds()
            {
                var list = new GenericDbParameter[0]
                {
                };
                return this.EnumerateTable<Tables.Ads>("Ads_GetAds", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public Task<IList<Tables.Ads>> Ads_GetAdsAsync()
            {
                var list = new GenericDbParameter[0]
                {
                };
                return this.ExecuteTableAsync<Tables.Ads>("Ads_GetAds", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public YNIndicator? Articles_ApproveComment(int? Article_Id, int? Comment_Id, YNIndicator? Valid_Indicator = null)
            {
                var list = new GenericDbParameter[3]
                {
                    new GenericDbParameter("@Article_Id", DbType.Int32, 0, ParameterDirection.Input, Article_Id),
                    new GenericDbParameter("@Comment_Id", DbType.Int32, 0, ParameterDirection.Input, Comment_Id),
                    new GenericDbParameter("@Valid_Indicator", DbType.AnsiStringFixedLength, 1, ParameterDirection.InputOutput, Valid_Indicator?.ToString())
                };
                this.ExecuteNonQuery("Articles_ApproveComment", list);
                if (Convert.IsDBNull(list[2].Value))
                    return default(YNIndicator?);
                else
                    return (YNIndicator?)(string)list[2].Value;
            }
            /// <summary>
            /// 
            /// </summary>
            public Task<YNIndicator?> Articles_ApproveCommentAsync(int? Article_Id, int? Comment_Id, YNIndicator? Valid_Indicator = null)
            {
                var list = new GenericDbParameter[3]
                {
                    new GenericDbParameter("@Article_Id", DbType.Int32, 0, ParameterDirection.Input, Article_Id),
                    new GenericDbParameter("@Comment_Id", DbType.Int32, 0, ParameterDirection.Input, Comment_Id),
                    new GenericDbParameter("@Valid_Indicator", DbType.AnsiStringFixedLength, 1, ParameterDirection.InputOutput, Valid_Indicator?.ToString())
                };
                return this.ExecuteScalarAsync<YNIndicator?>("Articles_ApproveComment", list, 2);
            }
            /// <summary>
            /// 
            /// </summary>
            public int? Articles_CreateOrUpdateArticle(int? Article_Id, string Article_Slug = null, DateTime? Published_Date = null, string PublishedStatus_Name = null, string Author_Slug = null, string Title_Text = null, string Series_Slug = null, string Body_Html = null, int? Discourse_Topic_Id = null, string Discourse_Topic_Opened = null)
            {
                var list = new GenericDbParameter[10]
                {
                    new GenericDbParameter("@Article_Id", DbType.Int32, 0, ParameterDirection.InputOutput, Article_Id),
                    new GenericDbParameter("@Article_Slug", DbType.String, 255, ParameterDirection.Input, Article_Slug),
                    new GenericDbParameter("@Published_Date", DbType.DateTime, 0, ParameterDirection.Input, Published_Date),
                    new GenericDbParameter("@PublishedStatus_Name", DbType.AnsiString, 15, ParameterDirection.Input, PublishedStatus_Name),
                    new GenericDbParameter("@Author_Slug", DbType.String, 255, ParameterDirection.Input, Author_Slug),
                    new GenericDbParameter("@Title_Text", DbType.String, 255, ParameterDirection.Input, Title_Text),
                    new GenericDbParameter("@Series_Slug", DbType.String, 255, ParameterDirection.Input, Series_Slug),
                    new GenericDbParameter("@Body_Html", DbType.String, -1, ParameterDirection.Input, Body_Html),
                    new GenericDbParameter("@Discourse_Topic_Id", DbType.Int32, 0, ParameterDirection.Input, Discourse_Topic_Id),
                    new GenericDbParameter("@Discourse_Topic_Opened", DbType.AnsiStringFixedLength, 1, ParameterDirection.Input, Discourse_Topic_Opened)
                };
                this.ExecuteNonQuery("Articles_CreateOrUpdateArticle", list);
                if (Convert.IsDBNull(list[0].Value))
                    return default(int?);
                else
                    return (int?)list[0].Value;
            }
            /// <summary>
            /// 
            /// </summary>
            public Task<int?> Articles_CreateOrUpdateArticleAsync(int? Article_Id, string Article_Slug = null, DateTime? Published_Date = null, string PublishedStatus_Name = null, string Author_Slug = null, string Title_Text = null, string Series_Slug = null, string Body_Html = null, int? Discourse_Topic_Id = null, string Discourse_Topic_Opened = null)
            {
                var list = new GenericDbParameter[10]
                {
                    new GenericDbParameter("@Article_Id", DbType.Int32, 0, ParameterDirection.InputOutput, Article_Id),
                    new GenericDbParameter("@Article_Slug", DbType.String, 255, ParameterDirection.Input, Article_Slug),
                    new GenericDbParameter("@Published_Date", DbType.DateTime, 0, ParameterDirection.Input, Published_Date),
                    new GenericDbParameter("@PublishedStatus_Name", DbType.AnsiString, 15, ParameterDirection.Input, PublishedStatus_Name),
                    new GenericDbParameter("@Author_Slug", DbType.String, 255, ParameterDirection.Input, Author_Slug),
                    new GenericDbParameter("@Title_Text", DbType.String, 255, ParameterDirection.Input, Title_Text),
                    new GenericDbParameter("@Series_Slug", DbType.String, 255, ParameterDirection.Input, Series_Slug),
                    new GenericDbParameter("@Body_Html", DbType.String, -1, ParameterDirection.Input, Body_Html),
                    new GenericDbParameter("@Discourse_Topic_Id", DbType.Int32, 0, ParameterDirection.Input, Discourse_Topic_Id),
                    new GenericDbParameter("@Discourse_Topic_Opened", DbType.AnsiStringFixedLength, 1, ParameterDirection.Input, Discourse_Topic_Opened)
                };
                return this.ExecuteScalarAsync<int?>("Articles_CreateOrUpdateArticle", list, 0);
            }
            /// <summary>
            /// 
            /// </summary>
            public void Articles_DeleteArticle(int? Article_Id)
            {
                var list = new GenericDbParameter[1]
                {
                    new GenericDbParameter("@Article_Id", DbType.Int32, 0, ParameterDirection.Input, Article_Id)
                };
                this.ExecuteNonQuery("Articles_DeleteArticle", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public Task Articles_DeleteArticleAsync(int? Article_Id)
            {
                var list = new GenericDbParameter[1]
                {
                    new GenericDbParameter("@Article_Id", DbType.Int32, 0, ParameterDirection.Input, Article_Id)
                };
                return this.ExecuteNonQueryAsync("Articles_DeleteArticle", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public YNIndicator? Articles_FeatureComment(int? Article_Id, int? Comment_Id, YNIndicator? Valid_Indicator = null)
            {
                var list = new GenericDbParameter[3]
                {
                    new GenericDbParameter("@Article_Id", DbType.Int32, 0, ParameterDirection.Input, Article_Id),
                    new GenericDbParameter("@Comment_Id", DbType.Int32, 0, ParameterDirection.Input, Comment_Id),
                    new GenericDbParameter("@Valid_Indicator", DbType.AnsiStringFixedLength, 1, ParameterDirection.InputOutput, Valid_Indicator?.ToString())
                };
                this.ExecuteNonQuery("Articles_FeatureComment", list);
                if (Convert.IsDBNull(list[2].Value))
                    return default(YNIndicator?);
                else
                    return (YNIndicator?)(string)list[2].Value;
            }
            /// <summary>
            /// 
            /// </summary>
            public Task<YNIndicator?> Articles_FeatureCommentAsync(int? Article_Id, int? Comment_Id, YNIndicator? Valid_Indicator = null)
            {
                var list = new GenericDbParameter[3]
                {
                    new GenericDbParameter("@Article_Id", DbType.Int32, 0, ParameterDirection.Input, Article_Id),
                    new GenericDbParameter("@Comment_Id", DbType.Int32, 0, ParameterDirection.Input, Comment_Id),
                    new GenericDbParameter("@Valid_Indicator", DbType.AnsiStringFixedLength, 1, ParameterDirection.InputOutput, Valid_Indicator?.ToString())
                };
                return this.ExecuteScalarAsync<YNIndicator?>("Articles_FeatureComment", list, 2);
            }
            /// <summary>
            /// 
            /// </summary>
            public void Articles_FixMissingAds()
            {
                var list = new GenericDbParameter[0]
                {
                };
                this.ExecuteNonQuery("Articles_FixMissingAds", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public Task Articles_FixMissingAdsAsync()
            {
                var list = new GenericDbParameter[0]
                {
                };
                return this.ExecuteNonQueryAsync("Articles_FixMissingAds", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public Tables.Articles_Extended Articles_GetArticleById(int? Article_Id)
            {
                var list = new GenericDbParameter[1]
                {
                    new GenericDbParameter("@Article_Id", DbType.Int32, 0, ParameterDirection.Input, Article_Id)
                };
                return this.EnumerateTable<Tables.Articles_Extended>("Articles_GetArticleById", list).FirstOrDefault();
            }
            /// <summary>
            /// 
            /// </summary>
            public async Task<Tables.Articles_Extended> Articles_GetArticleByIdAsync(int? Article_Id)
            {
                var list = new GenericDbParameter[1]
                {
                    new GenericDbParameter("@Article_Id", DbType.Int32, 0, ParameterDirection.Input, Article_Id)
                };
                return (await this.ExecuteTableAsync<Tables.Articles_Extended>("Articles_GetArticleById", list).ConfigureAwait(false)).FirstOrDefault();
            }
            /// <summary>
            /// 
            /// </summary>
            public Tables.Articles_Extended Articles_GetArticleByLegacyPost(int? Post_Id)
            {
                var list = new GenericDbParameter[1]
                {
                    new GenericDbParameter("@Post_Id", DbType.Int32, 0, ParameterDirection.Input, Post_Id)
                };
                return this.EnumerateTable<Tables.Articles_Extended>("Articles_GetArticleByLegacyPost", list).FirstOrDefault();
            }
            /// <summary>
            /// 
            /// </summary>
            public async Task<Tables.Articles_Extended> Articles_GetArticleByLegacyPostAsync(int? Post_Id)
            {
                var list = new GenericDbParameter[1]
                {
                    new GenericDbParameter("@Post_Id", DbType.Int32, 0, ParameterDirection.Input, Post_Id)
                };
                return (await this.ExecuteTableAsync<Tables.Articles_Extended>("Articles_GetArticleByLegacyPost", list).ConfigureAwait(false)).FirstOrDefault();
            }
            /// <summary>
            /// 
            /// </summary>
            public Tables.Articles_Extended Articles_GetArticleBySlug(string Article_Slug)
            {
                var list = new GenericDbParameter[1]
                {
                    new GenericDbParameter("@Article_Slug", DbType.String, 255, ParameterDirection.Input, Article_Slug)
                };
                return this.EnumerateTable<Tables.Articles_Extended>("Articles_GetArticleBySlug", list).FirstOrDefault();
            }
            /// <summary>
            /// 
            /// </summary>
            public async Task<Tables.Articles_Extended> Articles_GetArticleBySlugAsync(string Article_Slug)
            {
                var list = new GenericDbParameter[1]
                {
                    new GenericDbParameter("@Article_Slug", DbType.String, 255, ParameterDirection.Input, Article_Slug)
                };
                return (await this.ExecuteTableAsync<Tables.Articles_Extended>("Articles_GetArticleBySlug", list).ConfigureAwait(false)).FirstOrDefault();
            }
            /// <summary>
            /// 
            /// </summary>
            public IEnumerable<Tables.Articles_Extended> Articles_GetArticles(string Series_Slug, string PublishedStatus_Name, DateTime? RangeStart_Date, DateTime? RangeEnd_Date, string Author_Slug = null)
            {
                var list = new GenericDbParameter[5]
                {
                    new GenericDbParameter("@Series_Slug", DbType.String, 255, ParameterDirection.Input, Series_Slug),
                    new GenericDbParameter("@PublishedStatus_Name", DbType.AnsiString, 15, ParameterDirection.Input, PublishedStatus_Name),
                    new GenericDbParameter("@RangeStart_Date", DbType.DateTime, 0, ParameterDirection.Input, RangeStart_Date),
                    new GenericDbParameter("@RangeEnd_Date", DbType.DateTime, 0, ParameterDirection.Input, RangeEnd_Date),
                    new GenericDbParameter("@Author_Slug", DbType.String, 255, ParameterDirection.Input, Author_Slug)
                };
                return this.EnumerateTable<Tables.Articles_Extended>("Articles_GetArticles", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public Task<IList<Tables.Articles_Extended>> Articles_GetArticlesAsync(string Series_Slug, string PublishedStatus_Name, DateTime? RangeStart_Date, DateTime? RangeEnd_Date, string Author_Slug = null)
            {
                var list = new GenericDbParameter[5]
                {
                    new GenericDbParameter("@Series_Slug", DbType.String, 255, ParameterDirection.Input, Series_Slug),
                    new GenericDbParameter("@PublishedStatus_Name", DbType.AnsiString, 15, ParameterDirection.Input, PublishedStatus_Name),
                    new GenericDbParameter("@RangeStart_Date", DbType.DateTime, 0, ParameterDirection.Input, RangeStart_Date),
                    new GenericDbParameter("@RangeEnd_Date", DbType.DateTime, 0, ParameterDirection.Input, RangeEnd_Date),
                    new GenericDbParameter("@Author_Slug", DbType.String, 255, ParameterDirection.Input, Author_Slug)
                };
                return this.ExecuteTableAsync<Tables.Articles_Extended>("Articles_GetArticles", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public IEnumerable<Tables.Articles_Slim> Articles_GetArticlesSlim()
            {
                var list = new GenericDbParameter[0]
                {
                };
                return this.EnumerateTable<Tables.Articles_Slim>("Articles_GetArticlesSlim", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public Task<IList<Tables.Articles_Slim>> Articles_GetArticlesSlimAsync()
            {
                var list = new GenericDbParameter[0]
                {
                };
                return this.ExecuteTableAsync<Tables.Articles_Slim>("Articles_GetArticlesSlim", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public IEnumerable<Tables.Comments_Extended> Articles_GetFeaturedComments(int? Article_Id)
            {
                var list = new GenericDbParameter[1]
                {
                    new GenericDbParameter("@Article_Id", DbType.Int32, 0, ParameterDirection.Input, Article_Id)
                };
                return this.EnumerateTable<Tables.Comments_Extended>("Articles_GetFeaturedComments", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public Task<IList<Tables.Comments_Extended>> Articles_GetFeaturedCommentsAsync(int? Article_Id)
            {
                var list = new GenericDbParameter[1]
                {
                    new GenericDbParameter("@Article_Id", DbType.Int32, 0, ParameterDirection.Input, Article_Id)
                };
                return this.ExecuteTableAsync<Tables.Comments_Extended>("Articles_GetFeaturedComments", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public IEnumerable<Tables.Articles_Extended> Articles_GetOtherRecentArticles(string PublishedStatus_Name, int? Article_Count = null)
            {
                var list = new GenericDbParameter[2]
                {
                    new GenericDbParameter("@PublishedStatus_Name", DbType.AnsiString, 15, ParameterDirection.Input, PublishedStatus_Name),
                    new GenericDbParameter("@Article_Count", DbType.Int32, 0, ParameterDirection.Input, Article_Count)
                };
                return this.EnumerateTable<Tables.Articles_Extended>("Articles_GetOtherRecentArticles", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public Task<IList<Tables.Articles_Extended>> Articles_GetOtherRecentArticlesAsync(string PublishedStatus_Name, int? Article_Count = null)
            {
                var list = new GenericDbParameter[2]
                {
                    new GenericDbParameter("@PublishedStatus_Name", DbType.AnsiString, 15, ParameterDirection.Input, PublishedStatus_Name),
                    new GenericDbParameter("@Article_Count", DbType.Int32, 0, ParameterDirection.Input, Article_Count)
                };
                return this.ExecuteTableAsync<Tables.Articles_Extended>("Articles_GetOtherRecentArticles", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public IEnumerable<Tables.Articles_Extended> Articles_GetRecentArticles(string PublishedStatus_Name, string Series_Slug = null, string Author_Slug = null, int? Article_Count = null)
            {
                var list = new GenericDbParameter[4]
                {
                    new GenericDbParameter("@PublishedStatus_Name", DbType.AnsiString, 15, ParameterDirection.Input, PublishedStatus_Name),
                    new GenericDbParameter("@Series_Slug", DbType.String, 255, ParameterDirection.Input, Series_Slug),
                    new GenericDbParameter("@Author_Slug", DbType.String, 255, ParameterDirection.Input, Author_Slug),
                    new GenericDbParameter("@Article_Count", DbType.Int32, 0, ParameterDirection.Input, Article_Count)
                };
                return this.EnumerateTable<Tables.Articles_Extended>("Articles_GetRecentArticles", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public Task<IList<Tables.Articles_Extended>> Articles_GetRecentArticlesAsync(string PublishedStatus_Name, string Series_Slug = null, string Author_Slug = null, int? Article_Count = null)
            {
                var list = new GenericDbParameter[4]
                {
                    new GenericDbParameter("@PublishedStatus_Name", DbType.AnsiString, 15, ParameterDirection.Input, PublishedStatus_Name),
                    new GenericDbParameter("@Series_Slug", DbType.String, 255, ParameterDirection.Input, Series_Slug),
                    new GenericDbParameter("@Author_Slug", DbType.String, 255, ParameterDirection.Input, Author_Slug),
                    new GenericDbParameter("@Article_Count", DbType.Int32, 0, ParameterDirection.Input, Article_Count)
                };
                return this.ExecuteTableAsync<Tables.Articles_Extended>("Articles_GetRecentArticles", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public IEnumerable<Tables.Articles_Extended> Articles_GetUnpublishedArticles(string Author_Slug = null)
            {
                var list = new GenericDbParameter[1]
                {
                    new GenericDbParameter("@Author_Slug", DbType.String, 255, ParameterDirection.Input, Author_Slug)
                };
                return this.EnumerateTable<Tables.Articles_Extended>("Articles_GetUnpublishedArticles", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public Task<IList<Tables.Articles_Extended>> Articles_GetUnpublishedArticlesAsync(string Author_Slug = null)
            {
                var list = new GenericDbParameter[1]
                {
                    new GenericDbParameter("@Author_Slug", DbType.String, 255, ParameterDirection.Input, Author_Slug)
                };
                return this.ExecuteTableAsync<Tables.Articles_Extended>("Articles_GetUnpublishedArticles", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public YNIndicator? Articles_UnfeatureComment(int? Article_Id, int? Comment_Id, YNIndicator? Valid_Indicator = null)
            {
                var list = new GenericDbParameter[3]
                {
                    new GenericDbParameter("@Article_Id", DbType.Int32, 0, ParameterDirection.Input, Article_Id),
                    new GenericDbParameter("@Comment_Id", DbType.Int32, 0, ParameterDirection.Input, Comment_Id),
                    new GenericDbParameter("@Valid_Indicator", DbType.AnsiStringFixedLength, 1, ParameterDirection.InputOutput, Valid_Indicator?.ToString())
                };
                this.ExecuteNonQuery("Articles_UnfeatureComment", list);
                if (Convert.IsDBNull(list[2].Value))
                    return default(YNIndicator?);
                else
                    return (YNIndicator?)(string)list[2].Value;
            }
            /// <summary>
            /// 
            /// </summary>
            public Task<YNIndicator?> Articles_UnfeatureCommentAsync(int? Article_Id, int? Comment_Id, YNIndicator? Valid_Indicator = null)
            {
                var list = new GenericDbParameter[3]
                {
                    new GenericDbParameter("@Article_Id", DbType.Int32, 0, ParameterDirection.Input, Article_Id),
                    new GenericDbParameter("@Comment_Id", DbType.Int32, 0, ParameterDirection.Input, Comment_Id),
                    new GenericDbParameter("@Valid_Indicator", DbType.AnsiStringFixedLength, 1, ParameterDirection.InputOutput, Valid_Indicator?.ToString())
                };
                return this.ExecuteScalarAsync<YNIndicator?>("Articles_UnfeatureComment", list, 2);
            }
            /// <summary>
            /// 
            /// </summary>
            public void Authors_CreateOrUpdateAuthor(string Author_Slug, string Display_Name, YNIndicator? Admin_Indicator, string Bio_Html, string ShortBio_Text, string Image_Url, YNIndicator? Active_Indicator)
            {
                var list = new GenericDbParameter[7]
                {
                    new GenericDbParameter("@Author_Slug", DbType.String, 255, ParameterDirection.Input, Author_Slug),
                    new GenericDbParameter("@Display_Name", DbType.String, 255, ParameterDirection.Input, Display_Name),
                    new GenericDbParameter("@Admin_Indicator", DbType.AnsiStringFixedLength, 1, ParameterDirection.Input, Admin_Indicator?.ToString()),
                    new GenericDbParameter("@Bio_Html", DbType.String, -1, ParameterDirection.Input, Bio_Html),
                    new GenericDbParameter("@ShortBio_Text", DbType.String, -1, ParameterDirection.Input, ShortBio_Text),
                    new GenericDbParameter("@Image_Url", DbType.String, 255, ParameterDirection.Input, Image_Url),
                    new GenericDbParameter("@Active_Indicator", DbType.AnsiStringFixedLength, 1, ParameterDirection.Input, Active_Indicator?.ToString())
                };
                this.ExecuteNonQuery("Authors_CreateOrUpdateAuthor", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public Task Authors_CreateOrUpdateAuthorAsync(string Author_Slug, string Display_Name, YNIndicator? Admin_Indicator, string Bio_Html, string ShortBio_Text, string Image_Url, YNIndicator? Active_Indicator)
            {
                var list = new GenericDbParameter[7]
                {
                    new GenericDbParameter("@Author_Slug", DbType.String, 255, ParameterDirection.Input, Author_Slug),
                    new GenericDbParameter("@Display_Name", DbType.String, 255, ParameterDirection.Input, Display_Name),
                    new GenericDbParameter("@Admin_Indicator", DbType.AnsiStringFixedLength, 1, ParameterDirection.Input, Admin_Indicator?.ToString()),
                    new GenericDbParameter("@Bio_Html", DbType.String, -1, ParameterDirection.Input, Bio_Html),
                    new GenericDbParameter("@ShortBio_Text", DbType.String, -1, ParameterDirection.Input, ShortBio_Text),
                    new GenericDbParameter("@Image_Url", DbType.String, 255, ParameterDirection.Input, Image_Url),
                    new GenericDbParameter("@Active_Indicator", DbType.AnsiStringFixedLength, 1, ParameterDirection.Input, Active_Indicator?.ToString())
                };
                return this.ExecuteNonQueryAsync("Authors_CreateOrUpdateAuthor", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public Tables.Authors Authors_GetAuthorBySlug(string Author_Slug)
            {
                var list = new GenericDbParameter[1]
                {
                    new GenericDbParameter("@Author_Slug", DbType.String, 255, ParameterDirection.Input, Author_Slug)
                };
                return this.EnumerateTable<Tables.Authors>("Authors_GetAuthorBySlug", list).FirstOrDefault();
            }
            /// <summary>
            /// 
            /// </summary>
            public async Task<Tables.Authors> Authors_GetAuthorBySlugAsync(string Author_Slug)
            {
                var list = new GenericDbParameter[1]
                {
                    new GenericDbParameter("@Author_Slug", DbType.String, 255, ParameterDirection.Input, Author_Slug)
                };
                return (await this.ExecuteTableAsync<Tables.Authors>("Authors_GetAuthorBySlug", list).ConfigureAwait(false)).FirstOrDefault();
            }
            /// <summary>
            /// 
            /// </summary>
            public IEnumerable<Tables.Authors> Authors_GetAuthors()
            {
                var list = new GenericDbParameter[0]
                {
                };
                return this.EnumerateTable<Tables.Authors>("Authors_GetAuthors", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public Task<IList<Tables.Authors>> Authors_GetAuthorsAsync()
            {
                var list = new GenericDbParameter[0]
                {
                };
                return this.ExecuteTableAsync<Tables.Authors>("Authors_GetAuthors", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public void Authors_SetPassword(string Author_Slug, string Password_Text)
            {
                var list = new GenericDbParameter[2]
                {
                    new GenericDbParameter("@Author_Slug", DbType.String, 255, ParameterDirection.Input, Author_Slug),
                    new GenericDbParameter("@Password_Text", DbType.AnsiString, 255, ParameterDirection.Input, Password_Text)
                };
                this.ExecuteNonQuery("Authors_SetPassword", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public Task Authors_SetPasswordAsync(string Author_Slug, string Password_Text)
            {
                var list = new GenericDbParameter[2]
                {
                    new GenericDbParameter("@Author_Slug", DbType.String, 255, ParameterDirection.Input, Author_Slug),
                    new GenericDbParameter("@Password_Text", DbType.AnsiString, 255, ParameterDirection.Input, Password_Text)
                };
                return this.ExecuteNonQueryAsync("Authors_SetPassword", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public YNIndicator? Authors_ValidateLogin(string Author_Slug, string Password_Text, YNIndicator? Valid_Indicator = null)
            {
                var list = new GenericDbParameter[3]
                {
                    new GenericDbParameter("@Author_Slug", DbType.String, 255, ParameterDirection.Input, Author_Slug),
                    new GenericDbParameter("@Password_Text", DbType.AnsiString, 255, ParameterDirection.Input, Password_Text),
                    new GenericDbParameter("@Valid_Indicator", DbType.AnsiStringFixedLength, 1, ParameterDirection.InputOutput, Valid_Indicator?.ToString())
                };
                this.ExecuteNonQuery("Authors_ValidateLogin", list);
                if (Convert.IsDBNull(list[2].Value))
                    return default(YNIndicator?);
                else
                    return (YNIndicator?)(string)list[2].Value;
            }
            /// <summary>
            /// 
            /// </summary>
            public Task<YNIndicator?> Authors_ValidateLoginAsync(string Author_Slug, string Password_Text, YNIndicator? Valid_Indicator = null)
            {
                var list = new GenericDbParameter[3]
                {
                    new GenericDbParameter("@Author_Slug", DbType.String, 255, ParameterDirection.Input, Author_Slug),
                    new GenericDbParameter("@Password_Text", DbType.AnsiString, 255, ParameterDirection.Input, Password_Text),
                    new GenericDbParameter("@Valid_Indicator", DbType.AnsiStringFixedLength, 1, ParameterDirection.InputOutput, Valid_Indicator?.ToString())
                };
                return this.ExecuteScalarAsync<YNIndicator?>("Authors_ValidateLogin", list, 2);
            }
            /// <summary>
            /// 
            /// </summary>
            public int? Comments_CountCommentsByIP(string User_IP, int? Comments_Count = null)
            {
                var list = new GenericDbParameter[2]
                {
                    new GenericDbParameter("@User_IP", DbType.AnsiString, 45, ParameterDirection.Input, User_IP),
                    new GenericDbParameter("@Comments_Count", DbType.Int32, 0, ParameterDirection.InputOutput, Comments_Count)
                };
                this.ExecuteNonQuery("Comments_CountCommentsByIP", list);
                if (Convert.IsDBNull(list[1].Value))
                    return default(int?);
                else
                    return (int?)list[1].Value;
            }
            /// <summary>
            /// 
            /// </summary>
            public Task<int?> Comments_CountCommentsByIPAsync(string User_IP, int? Comments_Count = null)
            {
                var list = new GenericDbParameter[2]
                {
                    new GenericDbParameter("@User_IP", DbType.AnsiString, 45, ParameterDirection.Input, User_IP),
                    new GenericDbParameter("@Comments_Count", DbType.Int32, 0, ParameterDirection.InputOutput, Comments_Count)
                };
                return this.ExecuteScalarAsync<int?>("Comments_CountCommentsByIP", list, 1);
            }
            /// <summary>
            /// 
            /// </summary>
            public int? Comments_CountCommentsByToken(string User_Token, int? Comments_Count = null)
            {
                var list = new GenericDbParameter[2]
                {
                    new GenericDbParameter("@User_Token", DbType.AnsiString, -1, ParameterDirection.Input, User_Token),
                    new GenericDbParameter("@Comments_Count", DbType.Int32, 0, ParameterDirection.InputOutput, Comments_Count)
                };
                this.ExecuteNonQuery("Comments_CountCommentsByToken", list);
                if (Convert.IsDBNull(list[1].Value))
                    return default(int?);
                else
                    return (int?)list[1].Value;
            }
            /// <summary>
            /// 
            /// </summary>
            public Task<int?> Comments_CountCommentsByTokenAsync(string User_Token, int? Comments_Count = null)
            {
                var list = new GenericDbParameter[2]
                {
                    new GenericDbParameter("@User_Token", DbType.AnsiString, -1, ParameterDirection.Input, User_Token),
                    new GenericDbParameter("@Comments_Count", DbType.Int32, 0, ParameterDirection.InputOutput, Comments_Count)
                };
                return this.ExecuteScalarAsync<int?>("Comments_CountCommentsByToken", list, 1);
            }
            /// <summary>
            /// 
            /// </summary>
            public int? Comments_CountHiddenComments(string Author_Slug = null, int? Comments_Count = null)
            {
                var list = new GenericDbParameter[2]
                {
                    new GenericDbParameter("@Author_Slug", DbType.String, 255, ParameterDirection.Input, Author_Slug),
                    new GenericDbParameter("@Comments_Count", DbType.Int32, 0, ParameterDirection.InputOutput, Comments_Count)
                };
                this.ExecuteNonQuery("Comments_CountHiddenComments", list);
                if (Convert.IsDBNull(list[1].Value))
                    return default(int?);
                else
                    return (int?)list[1].Value;
            }
            /// <summary>
            /// 
            /// </summary>
            public Task<int?> Comments_CountHiddenCommentsAsync(string Author_Slug = null, int? Comments_Count = null)
            {
                var list = new GenericDbParameter[2]
                {
                    new GenericDbParameter("@Author_Slug", DbType.String, 255, ParameterDirection.Input, Author_Slug),
                    new GenericDbParameter("@Comments_Count", DbType.Int32, 0, ParameterDirection.InputOutput, Comments_Count)
                };
                return this.ExecuteScalarAsync<int?>("Comments_CountHiddenComments", list, 1);
            }
            /// <summary>
            /// 
            /// </summary>
            public int? Comments_CreateOrUpdateComment(int? Article_Id, string Body_Html, string User_Name, DateTime? Posted_Date, string User_IP, string User_Token, int? Parent_Comment_Id = null, YNIndicator? Hidden_Indicator = null, int? Comment_Id = null)
            {
                var list = new GenericDbParameter[9]
                {
                    new GenericDbParameter("@Article_Id", DbType.Int32, 0, ParameterDirection.Input, Article_Id),
                    new GenericDbParameter("@Body_Html", DbType.String, -1, ParameterDirection.Input, Body_Html),
                    new GenericDbParameter("@User_Name", DbType.String, 255, ParameterDirection.Input, User_Name),
                    new GenericDbParameter("@Posted_Date", DbType.DateTime, 0, ParameterDirection.Input, Posted_Date),
                    new GenericDbParameter("@User_IP", DbType.AnsiString, 45, ParameterDirection.Input, User_IP),
                    new GenericDbParameter("@User_Token", DbType.AnsiString, -1, ParameterDirection.Input, User_Token),
                    new GenericDbParameter("@Parent_Comment_Id", DbType.Int32, 0, ParameterDirection.Input, Parent_Comment_Id),
                    new GenericDbParameter("@Hidden_Indicator", DbType.AnsiStringFixedLength, 1, ParameterDirection.Input, Hidden_Indicator?.ToString()),
                    new GenericDbParameter("@Comment_Id", DbType.Int32, 0, ParameterDirection.InputOutput, Comment_Id)
                };
                this.ExecuteNonQuery("Comments_CreateOrUpdateComment", list);
                if (Convert.IsDBNull(list[8].Value))
                    return default(int?);
                else
                    return (int?)list[8].Value;
            }
            /// <summary>
            /// 
            /// </summary>
            public Task<int?> Comments_CreateOrUpdateCommentAsync(int? Article_Id, string Body_Html, string User_Name, DateTime? Posted_Date, string User_IP, string User_Token, int? Parent_Comment_Id = null, YNIndicator? Hidden_Indicator = null, int? Comment_Id = null)
            {
                var list = new GenericDbParameter[9]
                {
                    new GenericDbParameter("@Article_Id", DbType.Int32, 0, ParameterDirection.Input, Article_Id),
                    new GenericDbParameter("@Body_Html", DbType.String, -1, ParameterDirection.Input, Body_Html),
                    new GenericDbParameter("@User_Name", DbType.String, 255, ParameterDirection.Input, User_Name),
                    new GenericDbParameter("@Posted_Date", DbType.DateTime, 0, ParameterDirection.Input, Posted_Date),
                    new GenericDbParameter("@User_IP", DbType.AnsiString, 45, ParameterDirection.Input, User_IP),
                    new GenericDbParameter("@User_Token", DbType.AnsiString, -1, ParameterDirection.Input, User_Token),
                    new GenericDbParameter("@Parent_Comment_Id", DbType.Int32, 0, ParameterDirection.Input, Parent_Comment_Id),
                    new GenericDbParameter("@Hidden_Indicator", DbType.AnsiStringFixedLength, 1, ParameterDirection.Input, Hidden_Indicator?.ToString()),
                    new GenericDbParameter("@Comment_Id", DbType.Int32, 0, ParameterDirection.InputOutput, Comment_Id)
                };
                return this.ExecuteScalarAsync<int?>("Comments_CreateOrUpdateComment", list, 8);
            }
            /// <summary>
            /// 
            /// </summary>
            public void Comments_DeleteComments(string CommentIds_Csv)
            {
                var list = new GenericDbParameter[1]
                {
                    new GenericDbParameter("@CommentIds_Csv", DbType.AnsiString, -1, ParameterDirection.Input, CommentIds_Csv)
                };
                this.ExecuteNonQuery("Comments_DeleteComments", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public Task Comments_DeleteCommentsAsync(string CommentIds_Csv)
            {
                var list = new GenericDbParameter[1]
                {
                    new GenericDbParameter("@CommentIds_Csv", DbType.AnsiString, -1, ParameterDirection.Input, CommentIds_Csv)
                };
                return this.ExecuteNonQueryAsync("Comments_DeleteComments", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public IEnumerable<Tables.Comments_Extended> Comments_GetCommentById(int? Comment_Id)
            {
                var list = new GenericDbParameter[1]
                {
                    new GenericDbParameter("@Comment_Id", DbType.Int32, 0, ParameterDirection.Input, Comment_Id)
                };
                return this.EnumerateTable<Tables.Comments_Extended>("Comments_GetCommentById", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public Task<IList<Tables.Comments_Extended>> Comments_GetCommentByIdAsync(int? Comment_Id)
            {
                var list = new GenericDbParameter[1]
                {
                    new GenericDbParameter("@Comment_Id", DbType.Int32, 0, ParameterDirection.Input, Comment_Id)
                };
                return this.ExecuteTableAsync<Tables.Comments_Extended>("Comments_GetCommentById", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public IEnumerable<Tables.Comments_Extended> Comments_GetComments(int? Article_Id, int? Skip_Count = null, int? Limit_Count = null)
            {
                var list = new GenericDbParameter[3]
                {
                    new GenericDbParameter("@Article_Id", DbType.Int32, 0, ParameterDirection.Input, Article_Id),
                    new GenericDbParameter("@Skip_Count", DbType.Int32, 0, ParameterDirection.Input, Skip_Count),
                    new GenericDbParameter("@Limit_Count", DbType.Int32, 0, ParameterDirection.Input, Limit_Count)
                };
                return this.EnumerateTable<Tables.Comments_Extended>("Comments_GetComments", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public Task<IList<Tables.Comments_Extended>> Comments_GetCommentsAsync(int? Article_Id, int? Skip_Count = null, int? Limit_Count = null)
            {
                var list = new GenericDbParameter[3]
                {
                    new GenericDbParameter("@Article_Id", DbType.Int32, 0, ParameterDirection.Input, Article_Id),
                    new GenericDbParameter("@Skip_Count", DbType.Int32, 0, ParameterDirection.Input, Skip_Count),
                    new GenericDbParameter("@Limit_Count", DbType.Int32, 0, ParameterDirection.Input, Limit_Count)
                };
                return this.ExecuteTableAsync<Tables.Comments_Extended>("Comments_GetComments", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public IEnumerable<Tables.Comments_Extended> Comments_GetCommentsByIP(string User_IP, int? Skip_Count = null, int? Limit_Count = null)
            {
                var list = new GenericDbParameter[3]
                {
                    new GenericDbParameter("@User_IP", DbType.AnsiString, 45, ParameterDirection.Input, User_IP),
                    new GenericDbParameter("@Skip_Count", DbType.Int32, 0, ParameterDirection.Input, Skip_Count),
                    new GenericDbParameter("@Limit_Count", DbType.Int32, 0, ParameterDirection.Input, Limit_Count)
                };
                return this.EnumerateTable<Tables.Comments_Extended>("Comments_GetCommentsByIP", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public Task<IList<Tables.Comments_Extended>> Comments_GetCommentsByIPAsync(string User_IP, int? Skip_Count = null, int? Limit_Count = null)
            {
                var list = new GenericDbParameter[3]
                {
                    new GenericDbParameter("@User_IP", DbType.AnsiString, 45, ParameterDirection.Input, User_IP),
                    new GenericDbParameter("@Skip_Count", DbType.Int32, 0, ParameterDirection.Input, Skip_Count),
                    new GenericDbParameter("@Limit_Count", DbType.Int32, 0, ParameterDirection.Input, Limit_Count)
                };
                return this.ExecuteTableAsync<Tables.Comments_Extended>("Comments_GetCommentsByIP", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public IEnumerable<Tables.Comments_Extended> Comments_GetCommentsByToken(string User_Token, int? Skip_Count = null, int? Limit_Count = null)
            {
                var list = new GenericDbParameter[3]
                {
                    new GenericDbParameter("@User_Token", DbType.AnsiString, -1, ParameterDirection.Input, User_Token),
                    new GenericDbParameter("@Skip_Count", DbType.Int32, 0, ParameterDirection.Input, Skip_Count),
                    new GenericDbParameter("@Limit_Count", DbType.Int32, 0, ParameterDirection.Input, Limit_Count)
                };
                return this.EnumerateTable<Tables.Comments_Extended>("Comments_GetCommentsByToken", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public Task<IList<Tables.Comments_Extended>> Comments_GetCommentsByTokenAsync(string User_Token, int? Skip_Count = null, int? Limit_Count = null)
            {
                var list = new GenericDbParameter[3]
                {
                    new GenericDbParameter("@User_Token", DbType.AnsiString, -1, ParameterDirection.Input, User_Token),
                    new GenericDbParameter("@Skip_Count", DbType.Int32, 0, ParameterDirection.Input, Skip_Count),
                    new GenericDbParameter("@Limit_Count", DbType.Int32, 0, ParameterDirection.Input, Limit_Count)
                };
                return this.ExecuteTableAsync<Tables.Comments_Extended>("Comments_GetCommentsByToken", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public IEnumerable<Tables.Comments_Extended> Comments_GetHiddenComments(string Author_Slug = null, int? Skip_Count = null, int? Limit_Count = null)
            {
                var list = new GenericDbParameter[3]
                {
                    new GenericDbParameter("@Author_Slug", DbType.String, 255, ParameterDirection.Input, Author_Slug),
                    new GenericDbParameter("@Skip_Count", DbType.Int32, 0, ParameterDirection.Input, Skip_Count),
                    new GenericDbParameter("@Limit_Count", DbType.Int32, 0, ParameterDirection.Input, Limit_Count)
                };
                return this.EnumerateTable<Tables.Comments_Extended>("Comments_GetHiddenComments", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public Task<IList<Tables.Comments_Extended>> Comments_GetHiddenCommentsAsync(string Author_Slug = null, int? Skip_Count = null, int? Limit_Count = null)
            {
                var list = new GenericDbParameter[3]
                {
                    new GenericDbParameter("@Author_Slug", DbType.String, 255, ParameterDirection.Input, Author_Slug),
                    new GenericDbParameter("@Skip_Count", DbType.Int32, 0, ParameterDirection.Input, Skip_Count),
                    new GenericDbParameter("@Limit_Count", DbType.Int32, 0, ParameterDirection.Input, Limit_Count)
                };
                return this.ExecuteTableAsync<Tables.Comments_Extended>("Comments_GetHiddenComments", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public YNIndicator? Comments_UserHasApprovedComment(string User_IP, string User_Token, YNIndicator? Exists_Indicator = null)
            {
                var list = new GenericDbParameter[3]
                {
                    new GenericDbParameter("@User_IP", DbType.AnsiString, 45, ParameterDirection.Input, User_IP),
                    new GenericDbParameter("@User_Token", DbType.AnsiString, -1, ParameterDirection.Input, User_Token),
                    new GenericDbParameter("@Exists_Indicator", DbType.AnsiStringFixedLength, 1, ParameterDirection.InputOutput, Exists_Indicator?.ToString())
                };
                this.ExecuteNonQuery("Comments_UserHasApprovedComment", list);
                if (Convert.IsDBNull(list[2].Value))
                    return default(YNIndicator?);
                else
                    return (YNIndicator?)(string)list[2].Value;
            }
            /// <summary>
            /// 
            /// </summary>
            public Task<YNIndicator?> Comments_UserHasApprovedCommentAsync(string User_IP, string User_Token, YNIndicator? Exists_Indicator = null)
            {
                var list = new GenericDbParameter[3]
                {
                    new GenericDbParameter("@User_IP", DbType.AnsiString, 45, ParameterDirection.Input, User_IP),
                    new GenericDbParameter("@User_Token", DbType.AnsiString, -1, ParameterDirection.Input, User_Token),
                    new GenericDbParameter("@Exists_Indicator", DbType.AnsiStringFixedLength, 1, ParameterDirection.InputOutput, Exists_Indicator?.ToString())
                };
                return this.ExecuteScalarAsync<YNIndicator?>("Comments_UserHasApprovedComment", list, 2);
            }
            /// <summary>
            /// 
            /// </summary>
            public void Series_CreateOrUpdateSeries(string Series_Slug, string Title_Text, string Description_Text = null)
            {
                var list = new GenericDbParameter[3]
                {
                    new GenericDbParameter("@Series_Slug", DbType.String, 255, ParameterDirection.Input, Series_Slug),
                    new GenericDbParameter("@Title_Text", DbType.String, 255, ParameterDirection.Input, Title_Text),
                    new GenericDbParameter("@Description_Text", DbType.String, -1, ParameterDirection.Input, Description_Text)
                };
                this.ExecuteNonQuery("Series_CreateOrUpdateSeries", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public Task Series_CreateOrUpdateSeriesAsync(string Series_Slug, string Title_Text, string Description_Text = null)
            {
                var list = new GenericDbParameter[3]
                {
                    new GenericDbParameter("@Series_Slug", DbType.String, 255, ParameterDirection.Input, Series_Slug),
                    new GenericDbParameter("@Title_Text", DbType.String, 255, ParameterDirection.Input, Title_Text),
                    new GenericDbParameter("@Description_Text", DbType.String, -1, ParameterDirection.Input, Description_Text)
                };
                return this.ExecuteNonQueryAsync("Series_CreateOrUpdateSeries", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public IEnumerable<Tables.Series> Series_GetSeries()
            {
                var list = new GenericDbParameter[0]
                {
                };
                return this.EnumerateTable<Tables.Series>("Series_GetSeries", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public Task<IList<Tables.Series>> Series_GetSeriesAsync()
            {
                var list = new GenericDbParameter[0]
                {
                };
                return this.ExecuteTableAsync<Tables.Series>("Series_GetSeries", list);
            }
            /// <summary>
            /// 
            /// </summary>
            public Tables.Series Series_GetSeriesBySlug(string Series_Slug)
            {
                var list = new GenericDbParameter[1]
                {
                    new GenericDbParameter("@Series_Slug", DbType.String, 255, ParameterDirection.Input, Series_Slug)
                };
                return this.EnumerateTable<Tables.Series>("Series_GetSeriesBySlug", list).FirstOrDefault();
            }
            /// <summary>
            /// 
            /// </summary>
            public async Task<Tables.Series> Series_GetSeriesBySlugAsync(string Series_Slug)
            {
                var list = new GenericDbParameter[1]
                {
                    new GenericDbParameter("@Series_Slug", DbType.String, 255, ParameterDirection.Input, Series_Slug)
                };
                return (await this.ExecuteTableAsync<Tables.Series>("Series_GetSeriesBySlug", list).ConfigureAwait(false)).FirstOrDefault();
            }
        }
        public static class Outputs
        {
        }
    }
}
#pragma warning restore 1591
